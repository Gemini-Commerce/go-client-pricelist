/*
pricelist/service.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pricelist

import (
	"encoding/json"
	"fmt"
)

// PricelistPriceListType the model 'PricelistPriceListType'
type PricelistPriceListType string

// List of pricelistPriceListType
const (
	UNKNOWN PricelistPriceListType = "UNKNOWN"
	BASE PricelistPriceListType = "BASE"
	CATALOG_PROMOTION PricelistPriceListType = "CATALOG_PROMOTION"
)

// All allowed values of PricelistPriceListType enum
var AllowedPricelistPriceListTypeEnumValues = []PricelistPriceListType{
	"UNKNOWN",
	"BASE",
	"CATALOG_PROMOTION",
}

func (v *PricelistPriceListType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PricelistPriceListType(value)
	for _, existing := range AllowedPricelistPriceListTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PricelistPriceListType", value)
}

// NewPricelistPriceListTypeFromValue returns a pointer to a valid PricelistPriceListType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPricelistPriceListTypeFromValue(v string) (*PricelistPriceListType, error) {
	ev := PricelistPriceListType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PricelistPriceListType: valid values are %v", v, AllowedPricelistPriceListTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PricelistPriceListType) IsValid() bool {
	for _, existing := range AllowedPricelistPriceListTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to pricelistPriceListType value
func (v PricelistPriceListType) Ptr() *PricelistPriceListType {
	return &v
}

type NullablePricelistPriceListType struct {
	value *PricelistPriceListType
	isSet bool
}

func (v NullablePricelistPriceListType) Get() *PricelistPriceListType {
	return v.value
}

func (v *NullablePricelistPriceListType) Set(val *PricelistPriceListType) {
	v.value = val
	v.isSet = true
}

func (v NullablePricelistPriceListType) IsSet() bool {
	return v.isSet
}

func (v *NullablePricelistPriceListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePricelistPriceListType(val *PricelistPriceListType) *NullablePricelistPriceListType {
	return &NullablePricelistPriceListType{value: val, isSet: true}
}

func (v NullablePricelistPriceListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePricelistPriceListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

